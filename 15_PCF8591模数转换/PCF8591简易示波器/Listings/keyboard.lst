C51 COMPILER V9.59.0.0   KEYBOARD                                                          09/02/2021 11:40:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\keyboard.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE keyboard.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ke
                    -yboard.lst) TABS(2) OBJECT(.\Objects\keyboard.obj)

line level    source

   1          /**************************
   2          按键配置函数
   3          **************************/
   4          #include <reg52.h>
   5          sbit KEYOUT1 = P2^3;
   6          sbit KEYOUT2 = P2^2;
   7          sbit KEYOUT3 = P2^1;
   8          sbit KEYOUT4 = P2^0;
   9          sbit KEYIN1 = P2^4;
  10          sbit KEYIN2 = P2^5;
  11          sbit KEYIN3 = P2^6;
  12          sbit KEYIN4 = P2^7;
  13          unsigned char keyfinally[4][4]={         //按键终值
  14            {1,1,1,1},
  15            {1,1,1,1},
  16            {1,1,1,1},
  17            {1,1,1,1}
  18            };
  19          unsigned char code keycodemap[4][4]={    //按键映射表
  20            {1,2,3,10},
  21            {4,5,6,12},
  22            {7,8,9,11},
  23            {0,14,15,13}
  24            };
  25          extern void keyaction(unsigned char key);//外部函数声明
  26          /*按键驱动函数*/
  27          void keydriver()
  28          {
  29   1        static unsigned char backup[4][4]={    //按键上一个状态值
  30   1        {1,1,1,1},
  31   1        {1,1,1,1},
  32   1        {1,1,1,1},
  33   1        {1,1,1,1}
  34   1        };
  35   1        unsigned char i,j;
  36   1        for(i=0;i<4;i++)                       //循环检测按键状态
  37   1        {
  38   2          for(j=0;j<4;j++)
  39   2          {
  40   3            if(keyfinally[i][j] != backup[i][j])
  41   3            {
  42   4              if(backup[i][j] != 0)            //按键按下有效（backup[i][j] == 0为按键弹起检测）
  43   4              {
  44   5                keyaction(keycodemap[i][j]);
  45   5              }
  46   4              backup[i][j] = keyfinally[i][j]; //将按键当前状态复制给backup数组，便于下次比较
  47   4            }
  48   3          }
  49   2        }
  50   1      }
  51          /*按键扫描函数，在中断中每1ms扫描一次*/
  52          void keyscan()
  53          {
  54   1        unsigned char i;
C51 COMPILER V9.59.0.0   KEYBOARD                                                          09/02/2021 11:40:50 PAGE 2   

  55   1        static unsigned char keyout = 0;
  56   1        static unsigned char keybuffer[4][4]={ //按键状态缓冲区
  57   1        {0XFF,0XFF,0XFF,0XFF},
  58   1        {0XFF,0XFF,0XFF,0XFF},
  59   1        {0XFF,0XFF,0XFF,0XFF},
  60   1        {0XFF,0XFF,0XFF,0XFF}
  61   1        };
  62   1        keybuffer[keyout][0] = (keybuffer[keyout][0] << 1) | KEYIN1;
  63   1        keybuffer[keyout][1] = (keybuffer[keyout][1] << 1) | KEYIN2;
  64   1        keybuffer[keyout][2] = (keybuffer[keyout][2] << 1) | KEYIN3;
  65   1        keybuffer[keyout][3] = (keybuffer[keyout][3] << 1) | KEYIN4;
  66   1        for(i=0;i<4;i++)                     
  67   1        {
  68   2          if( (keybuffer[keyout][i] & 0X0F) == 0X00 )//当按键状态缓冲为1111 0000时，
  69   2          {                                          //连续四次扫描值为0，即4*4ms都是按下状态认定按键按下
  70   3            keyfinally[keyout][i] = 0;
  71   3          }
  72   2          else if( (keybuffer[keyout][i] & 0X0F) == 0x0F )
  73   2          {                                          //当按键状态缓冲为0000 1111时，
  74   3            keyfinally[keyout][i] = 1;               //连续四次扫描值为1，即4*4ms都是按下状态认定按键弹起
  75   3          }
  76   2        }
  77   1        keyout++;
  78   1        if(keyout == 4)
  79   1        {
  80   2          keyout = 0;
  81   2        }
  82   1        switch(keyout)                               //同一时刻只允许有一个KEYOUT=0，通过循环扫描建立矩阵按键
  83   1        {                                            //扫描周期16ms
  84   2          case 0:KEYOUT4 = 1;KEYOUT3 = 1;KEYOUT2 = 1;KEYOUT1 = 0;break;
  85   2          case 1:KEYOUT4 = 1;KEYOUT3 = 1;KEYOUT2 = 0;KEYOUT1 = 1;break;
  86   2          case 2:KEYOUT4 = 1;KEYOUT3 = 0;KEYOUT2 = 1;KEYOUT1 = 1;break;
  87   2          case 3:KEYOUT4 = 0;KEYOUT3 = 1;KEYOUT2 = 1;KEYOUT1 = 1;break;
  88   2          default:break;
  89   2        } 
  90   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    369    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
