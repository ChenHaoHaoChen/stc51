C51 COMPILER V9.59.0.0   ADD                                                               07/29/2021 10:16:46 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ADD
OBJECT MODULE PLACED IN .\Objects\add.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE add.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\add.lst
                    -) TABS(2) OBJECT(.\Objects\add.obj)

line level    source

   1          #include <reg52.h>
   2          sbit ADDR0 = P1^0;
   3          sbit ADDR1 = P1^1;
   4          sbit ADDR2 = P1^2;
   5          sbit ADDR3 = P1^3;
   6          sbit ENLED = P1^4;
   7          sbit KEYOUT4 = P2^0;
   8          sbit KEYOUT3 = P2^1;
   9          sbit KEYOUT2 = P2^2;
  10          sbit KEYOUT1 = P2^3;
  11          sbit KEYIN1 = P2^4;
  12          sbit KEYIN2 = P2^5;
  13          sbit KEYIN3 = P2^6;
  14          sbit KEYIN4 = P2^7;
  15          unsigned char code ledchar[]={            //定义数码管显示转换字符
  16            0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
  17            0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e 
  18            };
  19          unsigned char ledbuff[6]={                //六个数码管显示缓冲区
  20            0xff,0xff,0xff,0xff,0xff,0xff
  21            };
  22          unsigned char code keycodemap[4][4]={     //按键映射表，其他按键无功能
  23            {0x31,0x32,0x33,0x26},                  //1，2，3，+
  24            {0x34,0x35,0x36,0x25},                  //4，5，6，
  25            {0x37,0x38,0x39,0x28},                  //7，8，9
  26            {0x30,0x1b,0x0d,0x27}                   //0，esc，=
  27            };
  28          unsigned char keysta[4][4]={              //16个按键最终状态
  29            {1,1,1,1},{1,1,1,1},
  30            {1,1,1,1},{1,1,1,1}
  31            };
  32          
  33          void keydriver();                         //函数声明
  34          void keyaction(unsigned char keycode);
  35          void shownumber(unsigned int num);
  36          void ledscan();
  37          void keyscan();
  38          void main()              
  39          {
  40   1        ENLED = 0;                              //打开74138译码器
  41   1        ADDR3 = 1;
  42   1        TMOD = 0x01;                            //以1模式打开定时器，并定时1ms，开始定时
  43   1        TH0 = 0xfc;
  44   1        TL0 = 0x67;
  45   1        TR0 = 1;
  46   1        EA = 1;                                 //打开定时T0中断
  47   1        ET0 = 1;
  48   1        ledbuff[0] = ledchar[0];                //最低位数码管默认显示0
  49   1        while(1)
  50   1        {
  51   2          keydriver();
  52   2        }
  53   1      }
  54          /*按键检测函数*/
C51 COMPILER V9.59.0.0   ADD                                                               07/29/2021 10:16:46 PAGE 2   

  55          void keydriver()
  56          {
  57   1        unsigned char i,j;
  58   1        static unsigned char backup[4][4]={
  59   1        {1,1,1,1},{1,1,1,1},
  60   1        {1,1,1,1},{1,1,1,1}
  61   1        };
  62   1        for(i=0;i<4;i++)
  63   1        {
  64   2          for(j=0;j<4;j++)
  65   2          {
  66   3            if(keysta[i][j] != backup[i][j])
  67   3            {
  68   4              if(backup[i][j] != 0)
  69   4              {
  70   5                keyaction(keycodemap[i][j]);
  71   5              }
  72   4              backup[i][j] = keysta[i][j];
  73   4            }
  74   3          }
  75   2        }
  76   1      }
  77          /*按键执行函数，当检测到对应按键按下时，执行按键对应功能*/
  78          void keyaction(unsigned char keycode)
  79          {
  80   1        static unsigned long addend = 0;
  81   1        static unsigned long result = 0;
  82   1        if((keycode >= 0x30) && (keycode <= 0x39))  //当检测到数字0-9被按下时
  83   1        {
  84   2          addend = (addend*10) + (keycode - 0x30);  //确保两位数及以上数字输入
  85   2          shownumber(addend);
  86   2        }
  87   1        else if(keycode == 0x26)                    //当检测到k4键（+）按下
  88   1        {
  89   2          result += addend;                         //result = addend;也行，但不能完成连加计算
  90   2          addend = 0;
  91   2          shownumber(result);
  92   2        }
  93   1        else if(keycode == 0x0d)                    //当检测到k15键（=）按下
  94   1        {
  95   2          result += addend;
  96   2          addend = 0;
  97   2          shownumber(result);
  98   2        }   
  99   1        else if(keycode == 0x1b)                    //当检测到k14键（esc）按下
 100   1        {
 101   2          addend = 0;
 102   2          result = 0;
 103   2          shownumber(addend);   
 104   2        }
 105   1      }
 106          /*数码管显示函数*/
 107          void shownumber(unsigned long num)
 108          {
*** WARNING C235 IN LINE 108 OF add.c: parameter 1: different types
 109   1        unsigned char i;
 110   1        unsigned char buf[6];
 111   1        for(i=0;i<6;i++)                            //将实参addend分解成个、十、百等位
 112   1        {
 113   2          buf[i] = num % 10;
 114   2          num = num / 10;
 115   2        }
C51 COMPILER V9.59.0.0   ADD                                                               07/29/2021 10:16:46 PAGE 3   

 116   1        for(i=5;i>0;i--)                            //高位灭零，最低为总是有数字不能灭
 117   1        {
 118   2          if(buf[i] == 0)
 119   2          {
 120   3            ledbuff[i] = 0xff;
 121   3          }
 122   2          else 
 123   2          {
 124   3            break;
 125   3          }
 126   2        }
 127   1        for( ;i>=0;i--)                            //承接高位灭零中的i，将高位0灭掉，剩下有效数字显示在数码管
 128   1        {
 129   2          ledbuff[i] = ledchar[buf[i]];
 130   2        }
 131   1      }
 132          /*定时器T0中断函数，每1ms进入一次*/                                                                              
 133          void interrupttime0() interrupt 1
 134          {
 135   1        TH0 = 0xfc;                                //定时器重新定时
 136   1        TL0 = 0x67;
 137   1        ledscan();
 138   1        keyscan();
 139   1      }
 140          /*数码管刷新函数*/
 141          void ledscan()
 142          {
 143   1        static unsigned char i = 0;
 144   1        P0 = 0xff;                                 //消除数码管鬼影
 145   1        switch(i)
 146   1        {
 147   2          case 0:ADDR2 = 0;ADDR1 = 0;ADDR0 = 0;i++;P0 = ledbuff[0];break;
 148   2          case 1:ADDR2 = 0;ADDR1 = 0;ADDR0 = 1;i++;P0 = ledbuff[1];break;
 149   2          case 2:ADDR2 = 0;ADDR1 = 1;ADDR0 = 0;i++;P0 = ledbuff[2];break;
 150   2          case 3:ADDR2 = 0;ADDR1 = 1;ADDR0 = 1;i++;P0 = ledbuff[3];break;
 151   2          case 4:ADDR2 = 1;ADDR1 = 0;ADDR0 = 0;i++;P0 = ledbuff[4];break;
 152   2          case 5:ADDR2 = 1;ADDR1 = 0;ADDR0 = 1;i=0;P0 = ledbuff[5];break;
 153   2          default:break;
 154   2        }
 155   1      }
 156          /*按键刷新消抖函数*/
 157          void keyscan()
 158          {
 159   1        unsigned char i;
 160   1        static unsigned char keyout = 0;
 161   1        static unsigned char keybuf[4][4]={       //定义按键缓冲数组
 162   1          {0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},
 163   1          {0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff}
 164   1        };
 165   1        keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEYIN1; //每4ms左移位一次
 166   1        keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEYIN2;
 167   1        keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEYIN3;
 168   1        keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEYIN4;
 169   1        for(i=0;i<4;i++)
 170   1        {
 171   2          if((keybuf[keyout][i]&0x0f) == 0x00)                 //当出现连续四个0（低电平）时，认定按键按下
 172   2          {
 173   3            keysta[keyout][i] = 0;
 174   3          }
 175   2          else if((keybuf[keyout][i]&0x0f) == 0x0f)            //当出现连续四个1（高电平）时，认定按键弹起
 176   2          {
 177   3            keysta[keyout][i] = 1;       
C51 COMPILER V9.59.0.0   ADD                                                               07/29/2021 10:16:46 PAGE 4   

 178   3          }
 179   2          else
 180   2          {}
 181   2        }
 182   1        keyout++;
 183   1        if(keyout == 4)
 184   1        {
 185   2          keyout = 0;
 186   2        }
 187   1        switch(keyout)
 188   1        {
 189   2          case 0:KEYOUT4 = 1;KEYOUT3 = 1;KEYOUT2 = 1;KEYOUT1 = 0;break;
 190   2          case 1:KEYOUT4 = 1;KEYOUT3 = 1;KEYOUT2 = 0;KEYOUT1 = 1;break;
 191   2          case 2:KEYOUT4 = 1;KEYOUT3 = 0;KEYOUT2 = 1;KEYOUT1 = 1;break;
 192   2          case 3:KEYOUT4 = 0;KEYOUT3 = 1;KEYOUT2 = 1;KEYOUT1 = 1;break;
 193   2          default:break;
 194   2        }
 195   1      }
 196            
 197            
 198            
 199            
 200            
 201            
 202            
 203            
 204            
 205            
 206            
 207            
 208            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    868    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     64      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
